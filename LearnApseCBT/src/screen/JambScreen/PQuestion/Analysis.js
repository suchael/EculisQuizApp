import {View,         Text,         StyleSheet,        Switch,        ScrollView,        Dimensions,		TouchableOpacity,        TouchableHighlight } from 'react-native'; import React , {useState, useMemo} from 'react';import {useSafeAreaInsets} from "react-native-safe-area-context";import { useNavigation, useRoute } from '@react-navigation/native';import * as Clipboard from 'expo-clipboard';// Iconsimport { AntDesign , 				FontAwesome, 				Ionicons, MaterialIcons, } from '@expo/vector-icons';// My importimport subjects from  "../../../SubjectDb.js";import ReadMore from "./ReadMore.js";export default function Analysis (){	const insets = useSafeAreaInsets();	return(		<View style = {styles.mainContainer}>			<Header/>			<ScrollView contentContainerStyle={{ flexGrow: 1,}} >				<View style = {{                  	paddingLeft: insets.left + 10,                  	paddingRight: insets.right + 10,                  	paddingTop: insets.top + 14,                  	paddingBottom: insets.bottom + 100,    				                     }}				>					<QuestionInterfaceContainer ind = "1"/>				</View>			</ScrollView>			<BottomBtn/>		</View>	);}function QuestionInterfaceContainer({ind}){	const navigation = useNavigation();	const route = useRoute ();	const { questions, 				  currentQuestionIndex, 				  startQuestionIndexPerPage,			  	totalQuestions,				 } = useMemo(() => route.params, [route.params]);//get the questions passed from the Prev screen		const copyToClipboard = async (eachQuestion) => {  		const { question, options, answer, explanation } = eachQuestion;  				 // Combine all options into a single string  		const allQuestionOptions = options.map((option) => {    		return "\n" + Object.keys(option)[0] + ". " +option[Object.keys(option)[0]] + "\n\t---" +option[Object.keys(option)[1]];  		}).join('\n');  		// Combine the question and options  		const textToCopy = `${question} \n${allQuestionOptions} \n\n*Correct Answer:* ${answer} \n\n*Explanation* \n${explanation}`;  		// Attempt to copy the text to the clipboard  		try {    		await Clipboard.setString(textToCopy);    		alert("Question and Analysis copied successfully");  		} catch (error) {    		alert("Copy failed. Please try again.");  		}	};		return(		<View style = {styles.questionInterfaceContainer}>			<View style = {[styles.questionAndExplanationScreen, {paddingBottom: 20}]}>				<View style = {styles.questionScreenNumberView}>					<Text style = {styles.questionScreenNumber}>						Question { startQuestionIndexPerPage + currentQuestionIndex + 1} of { totalQuestions } 					</Text>					<TouchableOpacity 						onPress ={ ()=>copyToClipboard(questions[ currentQuestionIndex ]) } 						style = {{justifyContent: "center", alignItems: "center",  padding: 3, position: "absolute", top: 0, right: 2}}					>						<MaterialIcons name="content-copy" size={24} color="black" />					</TouchableOpacity>				</View>				<Text style = {styles.questionScreenQuestionContent}>					{questions[ currentQuestionIndex ].question}				</Text>			</View>			<View style = {[styles.questionAndExplanationScreen, {marginVertical: 30, backgroundColor: "lightgray", borderRadius: 25}]}>				<View style = {styles.questionScreenNumberView}>					<Text style = {[styles.questionScreenNumber, {													backgroundColor: "white",													fontSize: 20, 											}]}					>						Analysis of each option 					</Text>				</View>				<Text style = {styles.correctAnswerText}>					Correct Answer: { questions[ currentQuestionIndex ].answer.slice(-1)}				</Text>						<View style = {styles.optionMain}>				{					questions[ currentQuestionIndex ].options.map((eachOption, index)=> (						<View key = {index} style ={{justifyContent: "center", alignItems: "center"}}>						<View style= {[styles.optionContainer, {borderColor:Object.keys(eachOption)[0] === questions[ currentQuestionIndex ].answer.slice(-1)? "#00A86B": "red", borderWidth: 2.5, backgroundColor: Object.keys(eachOption)[0] === questions[ currentQuestionIndex ].answer.slice(-1)? "#98FB98": "pink"}]}>							<Text style = {styles.optionText}>								{ Object.keys(eachOption)[0]}{".  "}											<Text style = {[styles.optionText, {fontWeight: "500", fontSize: 16.7}]}>              						{ eachOption[Object.keys(eachOption)[0]] }								</Text>							</Text>							{								Object.keys(eachOption)[0] === questions[ currentQuestionIndex ].answer.slice(-1)?	 //add a green icon to the correct option 									(<AntDesign name="checkcircle" size={26} color="#00A86B" />									) : (									<MaterialIcons name="cancel" size={32} color="red" />												)									}         	  		 </View>         			{/*Each Option Analysis*/}         			<View style ={styles.attachToOption}>         				<Text style ={{fontSize: 16.5, fontWeight: "600", marginTop: -4,}}>							This is 							{								Object.keys(eachOption)[0] === questions[ currentQuestionIndex ].answer.slice(-1)?								(									<Text style ={{fontSize: 20, fontWeight: "bold", color: "#00A86B"}}>										{"  "}Correct{"  "}									</Text> 								):(									<Text style ={{fontSize: 20, fontWeight: "bold", color: "red",}}>										{"  "}Wrong{"  "}									</Text> 								)							}							because: 						</Text>											<Text style ={{fontSize: 16.5, fontWeight: "500", marginTop: -4,}}>							{ eachOption[Object.keys(eachOption)[1]] }						</Text>					         			</View>         			{/*Closing - Each Option Analysis*/}                  		</View>     					))				}			</View>			</View>		</View>	);}function Header(){	// This is an Empty Header... From the screen to question 	const insets = useSafeAreaInsets();	return(			<View style={{flexDirection: "row", 				  justifyContent: "space-between",                  paddingLeft: insets.left + 10,                  paddingRight: insets.right + 10,                  paddingBottom: insets.bottom+2,                  height:  12,                  width: "100%",                  position: "absolute",                  top:0,                  backgroundColor: "lightgray"			}}>			</View>	);}function BottomBtn(){	const navigation= useNavigation ();	const route = useRoute ();	const {currentQuestionIndex, 				  questions, 				  totalQuestions,				  startQuestionIndexPerPage} = route.params	//console.log(currentQuestionIndex)		const goToNextExplanation = () => {		console.log(questions.length, startQuestionIndexPerPage)    	if (currentQuestionIndex < questions.length - 1) {      		navigation.replace('Analysis', {        	  	questions,        	  	currentQuestionIndex: currentQuestionIndex + 1,        		  startQuestionIndexPerPage: startQuestionIndexPerPage,        		  totalQuestions: totalQuestions,        	  });    	}  	};    	const goToPrevExplanation = () => {    	if (currentQuestionIndex > 0) {      		navigation.replace('Analysis', {        			questions,        			currentQuestionIndex: currentQuestionIndex - 1,        			startQuestionIndexPerPage: startQuestionIndexPerPage,        			totalQuestions: totalQuestions,      		});    	}  	};  	return (		<View style = {{ position: "absolute", bottom: 0, left: 22, right: 22, flexDirection: "row", justifyContent: "space-between", alignItems: "center", paddingBottom: 18, backgroundColor: "transparent"}}>			<TouchableHighlight        			onPress={goToPrevExplanation}        			disabled= { currentQuestionIndex == startQuestionIndexPerPage }        			activeOpacity={0.9}        			underlayColor="white"        			style= {[styles.nextAndPrevBtn, {backgroundColor: currentQuestionIndex ==0 ? "lightgray": "gray"}]}      	>        		<AntDesign name="arrowleft" size={30} color={currentQuestionIndex ==0 ? "#777":"black"} />      	</TouchableHighlight>            	<TouchableHighlight        			onPress={()=>navigation.goBack()}        			activeOpacity={0.9}        			underlayColor="white"        			style= {styles.nextAndPrevBtn}      	>        		<Text style = {{fontSize: 16, fontWeight: "bold"}}>Ok</Text>      	</TouchableHighlight>              	<TouchableHighlight        			onPress={goToNextExplanation}        			disabled= { currentQuestionIndex + 1 == questions.length }        			activeOpacity={0.9}        			underlayColor="white"        			style= {[styles.nextAndPrevBtn, {backgroundColor: currentQuestionIndex + 1 == questions.length? "lightgray" : "gray"}]}      	>        		<AntDesign name="arrowright" size={30} color= { currentQuestionIndex + 1 == questions.length? "#777" :"black"}/>      	</TouchableHighlight>  		</View>	);}const styles = StyleSheet.create({	  // main container  mainContainer:{  	flex:1,  	backgroundColor: "white",  },  // Question Interface   questionInterfaceContainer: {   	backgroundColor: "white",   	//borderWidth: 2, 	   //padding:4, 	   //borderColor: "blue", 	   borderRadius: 15, 	   marginBottom: 35,		maxWidth: 420,		flex: 1, 	},	questionAndExplanationScreen: {		borderWidth:2, 	    paddingHorizontal: 8, 		paddingVertical: 12,		//borderColor: "red", 		flexDirection: "column", 		borderRadius: 18,  		marginBottom: 12,		flex: 1, 	},	questionScreenNumberView: {		marginTop: -2, 		justifyContent: "center", 		alignItems: "center",		paddingBottom: 6,	},	questionScreenNumber: {		fontSize: 17, 		fontWeight: "bold", 		borderWidth: 2, 		paddingHorizontal: 10,		paddingVertical: 2, 		borderRadius: 5	},   questionScreenQuestionContent: {   	fontSize: 16.7, 	   fontWeight: "500", 	},	optionMain: {		//borderWidth:2, 		paddingTop: 5	},	optionContainer: {		justifyContent: "space-between", 		alignItems: "center", 		flexDirection: "row",		paddingHorizontal: 12,		paddingVertical: 6,		borderWidth: 2.1, 		borderColor: "red",		borderRadius: 10, 		marginTop: 7, 		backgroundColor: "pink" ,		minHeight: 46,		width: "100%",	},	optionText:{		fontSize: 18, 		fontWeight: "600",		marginTop: -4,		flex: 1		},	correctAnswerText: {		fontWeight: "bold",		fontSize: 20, 		marginVertical: 20,		flex: 1,		},	attachToOption: {borderBottomWidth: 2,		 borderLeftWidth: 2, 		 borderRightWidth: 2, 		 borderColor: "#777", 		 width: "86%", 		 borderBottomLeftRadius: 12, 		 borderBottomRightRadius: 12,		 padding: 10, marginBottom: 15,		 backgroundColor: "white",	},  // Bottom Buttons	nextAndPrevBtn: {		//borderWidth: 2,		width: 90,		height: 46,		justifyContent: "center",		alignItems: "center",		backgroundColor: "gray",		borderRadius: 5,   },});